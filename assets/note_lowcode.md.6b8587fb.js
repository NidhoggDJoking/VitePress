import{_ as e,o as a,c as l,a as t}from"./app.4854f1f3.js";const g=JSON.parse('{"title":"lowcode","description":"","frontmatter":{},"headers":[{"level":2,"title":"pageplug - react + taro","slug":"pageplug-react-taro","link":"#pageplug-react-taro","children":[{"level":3,"title":"局限性：","slug":"局限性","link":"#局限性","children":[]}]}],"relativePath":"note/lowcode.md","lastUpdated":1693194898000}'),r={name:"note/lowcode.md"},o=t('<h1 id="lowcode" tabindex="-1">lowcode <a class="header-anchor" href="#lowcode" aria-hidden="true">#</a></h1><h2 id="pageplug-react-taro" tabindex="-1">pageplug - react + taro <a class="header-anchor" href="#pageplug-react-taro" aria-hidden="true">#</a></h2><h3 id="局限性" tabindex="-1">局限性： <a class="header-anchor" href="#局限性" aria-hidden="true">#</a></h3><ul><li>组件</li></ul><p>项目中涉及的组件越多所要进行开发和维护的成本就越大 即便是非常用组件也需要进行开发于维护</p><ul><li>权限</li></ul><p>目前项目中使用的按钮多数是使用了权限控制来限制不同用户的操作权限， 而巨大多数低代码平台的组件对于权限控制都没有涉及</p><ul><li>样式</li></ul><p>低代码的组件样式风格局限于开发对于组件样式所提供的可选选项 样式可选项提供的越多，开发成本更高，所产生的兼容问题可能性越大 且无法做到完全的自定义，如果项目存在主题切换样式的处理难度将指数型的加大</p><ul><li>BUG</li></ul><p>低代码平台生成的页面所产生的缺陷，难以追踪问题所在 定位问题难则修改BUG的难度大</p><ul><li>API</li></ul><p>页面请求的每个接口都是一个完整的URL， 这样的请求方式是没有区分多环境开发的 所以是不支持同时部署多个环境</p><ul><li>表单校验</li></ul><p>组件的表单校验只是针对组件内单一数据进行的校验 无法做到多个组件数据来进行判断 特别是一个表单数据关联大的情况低代码平台是无法满足这类场景的</p>',15),i=[o];function c(d,p,n,s,u,_){return a(),l("div",null,i)}const f=e(r,[["render",c]]);export{g as __pageData,f as default};
